{"version":3,"sources":["control-panel.js","App.js","serviceWorker.js","index.js"],"names":["ControlPanel","this","props","onChangeChoice","choice","onSelectM2","onSelectRooftop","zipChange","setState","checkm2","checkroof","className","ref","onChange","evt","bchoice","target","value","refs","checked","defaultValue","type","name","zip","length","PureComponent","COLOR_SCALE","scaleThreshold","domain","range","INITIAL_VIEW_STATE","latitude","longitude","zoom","maxZoom","pitch","bearing","ambientLight","AmbientLight","color","intensity","dirLight","SunLight","timestamp","Date","UTC","_shadow","data","require","App","state","hoveredObject","modifier","text","_onHover","bind","_renderTooltip","lightingEffect","LightingEffect","shadowColor","_effects","check1","check2","console","log","features","forEach","feature","viewState","undefined","properties","coordX","X_COORD","coordY","Y_COORD","month","x","y","object","GeoJsonLayer","id","opacity","stroked","filled","extruded","wireframe","getFillColor","f","getLineColor","pickable","onHover","updateTriggers","style","top","left","AREA_1","mapStyle","layers","_renderLayers","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34ed059c.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\n\nexport default class ControlPanel extends PureComponent {\n  render() {\n    var {onChangeChoice, choice, onSelectM2, onSelectRooftop, zipChange} = this.props;\n    this.setState({ choice: choice, checkm2:false, checkroof:false});\n\n    const _onChangeChoice = evt => {\n      const bchoice = evt.target.value;\n      // add selected days to start time to calculate new time\n      onChangeChoice(bchoice, this.refs[\"solar\"].checked, this.refs[\"m2\"].checked);\n    };\n\n    const _onChangeM2 = evt => {\n      var checked = evt.target.checked\n      onSelectM2(checked, this.refs[\"mySelect\"].value)\n      if(checked){\n      this.refs[\"solar\"].checked = !checked\n      }\n    }\n    \n    const _onChangeRoof = evt => {\n      var checked = evt.target.checked\n      onSelectRooftop(checked, this.refs[\"mySelect\"].value)\n      if(checked){\n\n      this.refs[\"m2\"].checked = !checked\n      }\n    }\n    const _enterZip = evt => {\n      var zip = evt.target.value\n      if(zip.length == 5){\n        zipChange(zip)\n      }\n      if(zip.length == 0){\n        zipChange(\"None\")\n      }\n    }\n    return (\n      <div className=\"control-panel\">\n        <h3>SolarState</h3>\n        <p>\n          Map showing Solar Radiation, and potential roof coverage\n          <br />\n        </p>\n        <hr />\n     \n        <div>\n          <label>choice: {choice}</label>\n          <br/>\n          <select ref=\"mySelect\" onChange={_onChangeChoice} defaultValue={choice}>\n        <option>JANUARY</option>\n        <option>FEBRUARY</option>\n        <option>MARCH</option>\n        <option>APRIL</option>\n        <option>MAY</option>\n        <option>JUNE</option>\n        <option>JULY</option>\n        <option>AUGUST</option>\n        <option>SEPTEMBER</option>\n        <option>OCTOBER</option>\n        <option>NOVEMBER</option>\n        <option>DECEMBER</option>\n        <option>ANNUAL</option>\n      </select>\n      <br/>\n      <input type=\"checkbox\" ref=\"m2\" name=\"m2\" value=\"KWh per m2\" onChange={_onChangeM2} />\n      See Rooftop Potential Kwh per m2\n      <br/>\n      <input type=\"checkbox\" ref=\"solar\" name=\"solar\" value=\"See Rooftop Potential\" onChange={_onChangeRoof} />\n      See Rooftop Potential Kwh Total\n      <br/>\n      Zip Code:  \n      <input type=\"number\" ref=\"zip\" name=\"zip\" onChange={_enterZip}/>\n      <br/>\n      Clear zip to move map\n        </div>\n        <hr />\n       \n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {GeoJsonLayer, PolygonLayer} from '@deck.gl/layers';\nimport {LightingEffect, AmbientLight, _SunLight as SunLight} from '@deck.gl/core';\nimport {scaleThreshold} from 'd3-scale';\nimport ControlPanel from './control-panel';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY2hyaXNjb2xlczAxIiwiYSI6ImNrNnhqaDF3dzBhNjMzZW8waHpnMzN5ZWsifQ.mLeEly0rwEBCNiffXh_0tg'; \n\nexport const COLOR_SCALE = scaleThreshold()\n  .domain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  .range([\n    [65, 182, 196],\n    [127, 205, 187],\n    [199, 233, 180],\n    [237, 248, 177],\n    [255, 255, 204],\n    [255, 237, 160],\n    [254, 217, 118],\n    [254, 178, 76],\n    [253, 141, 60],\n    [252, 78, 42],\n    \n  ]);\n\nconst INITIAL_VIEW_STATE = {\n  latitude: 41.650623,\n  longitude: -102.693757,\n  zoom: 3,\n  maxZoom: 16,\n  pitch: 10,\n  bearing: 0\n};\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst dirLight = new SunLight({\n  timestamp: Date.UTC(2019, 7, 1, 22),\n  color: [255, 255, 255],\n  intensity: 1.0,\n  _shadow: true\n});\n\nconst data = require('./result.json');\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hoveredObject: null,\n      choice: \"ANNUAL\",\n      modifier: 1,\n       text:\" / M^2 Solar Potential\",\n      INITIAL_VIEW_STATE: INITIAL_VIEW_STATE\n      \n    };\n    this._onHover = this._onHover.bind(this);\n    this._renderTooltip = this._renderTooltip.bind(this);\n\n    const lightingEffect = new LightingEffect({ambientLight, dirLight});\n    lightingEffect.shadowColor = [0, 0, 0, 0.5];\n    this._effects = [lightingEffect];\n    this.onChangeChoice = this.onChangeChoice.bind(this);\n    this.onSelectM2 = this.onSelectM2.bind(this);\n\n    this.onSelectRooftop = this.onSelectRooftop.bind(this);\n    this.zipChange = this.zipChange.bind(this);\n\n  }\n\n  onChangeChoice(choice, check1, check2){\n    if(check1 || check2){\n      console.log(check1)\n    }else{\n    this.setState({ choice: choice});\n    }\n\n    \n\n  }\n\n  // This changes the focus of the map to a specific zip code area\n  zipChange(zip){\n   data.features.forEach((feature) => {\n     if(zip == \"None\"){\n      this.setState({\n        viewState: undefined\n     })}\n      if(feature.properties.zip == zip){\n        var coordX = feature.properties.X_COORD\n        var coordY = feature.properties.Y_COORD\n\n        this.setState({\n          viewState: {\n            latitude: coordY,\n            longitude: coordX,\n            zoom: 10,\n            maxZoom: 16,\n            pitch: 0,\n            bearing: 0\n          }})\n      }\n    });\n  }\n\n  // this is for changing the view for rooftop per m^2 potential\n  onSelectM2(checked,month){\n    if(checked){\n      this.setState({choice: \"norm_potential\", modifier: 1, text:\"/ M^2\"})\n    } else {\n      this.setState({choice: \"ANNUAL\", modifier: 1, text:\" / M^2 Solar Potential\"})\n    }\n  }\n  \n  // this is for changing the view for rooftop total potential\n  onSelectRooftop(checked,month){\n    if(checked){\n      this.setState({choice: \"abs_potential\", modifier: 50000, text:\" total possible on roofing\"})\n    } else {\n      this.setState({choice: \"ANNUAL\", modifier: 1, text:\" / M^2 Solar Potential \"})\n    }\n  }\n\n  _onHover({x, y, object}) {\n    this.setState({x, y, hoveredObject: object});\n  }\n\n  _renderLayers(choice) {\n    \n    return [\n      // only needed when using shadows - a plane for shadows to drop on\n      // new PolygonLayer({\n      //   id: 'ground',\n      //   data: data,\n      //   stroked: false,\n      //   getPolygon: f => f,\n      //   getFillColor: [0, 0, 0, 0]\n      // }),\n      new GeoJsonLayer({\n        id: 'geojson',\n        data,\n        opacity: 0.8,\n        stroked: false,\n        filled: true,\n        extruded: true,\n        wireframe: true,\n        // getElevation: f => Math.sqrt(f.properties[this.state.choice]) * 100000 ,\n        getFillColor: f => COLOR_SCALE(f.properties[choice] / this.state.modifier),\n        getLineColor: [255, 255, 255],\n        pickable: true,\n        onHover: this._onHover,\n        updateTriggers: {\n          getFillColor: [this.state.choice]\n      }\n      })\n    ];\n  }\n\n  _renderTooltip() {\n    const {x, y, hoveredObject} = this.state;\n    return (\n      hoveredObject && (\n        <div className=\"tooltip\" style={{top: y, left: x}}>\n          <div>\n            <b>Average Solar Radiation</b>\n          </div>\n          <div>\n            <div>{hoveredObject.properties.AREA_1} KM size </div>\n            <div>\n              {hoveredObject.properties[this.state.choice]} KWh {this.state.text}\n            </div>\n            <div>\n            ZIP: {hoveredObject.properties.zip} \n            </div>\n          </div>\n         </div>\n     \n      )\n    );\n  }\n\n  render() {\n    const {mapStyle = 'mapbox://styles/mapbox/light-v9'} = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers(this.state.choice)}\n        // effects={this._effects}\n        initialViewState={this.state.INITIAL_VIEW_STATE}\n        controller={true}\n        viewState={this.state.viewState}\n\n      >\n        <StaticMap\n          reuseMaps\n          mapStyle={mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n      <ControlPanel \n       onChangeChoice = {this.onChangeChoice}\n      choice= {this.state.choice}\n      onSelectM2={this.onSelectM2}\n      onSelectRooftop={this.onSelectRooftop}\n      zipChange={this.zipChange}/>\n        {this._renderTooltip}\n      </DeckGL>\n    );\n  }\n}\n// export default App;\nexport function renderToDOM(container) {\n  render(<App />, container);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}